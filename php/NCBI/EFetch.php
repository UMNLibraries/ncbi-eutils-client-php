<?php

require_once 'NCBI/eUtil.php';
require_once 'File/Find/Rule.php';
require_once 'Moose.php';

class NCBI_EFetch extends Moose
{
    protected function properties()
    {
        // TODO: Validate!
        self::has('count',      array('is' => 'protected', 'default' => 0,));
        self::has('db',         array('is' => 'protected', 'default' => 'pubmed',));
        self::has('email',      array('is' => 'protected',));

        //  e.g. 'your-tool-name'
        self::has('tool',       array('is' => 'protected',));

        //  TODO: other possibilities than 'citation'?
        self::has('rettype',    array('is' => 'protected', 'default' => 'citation',));

        //  TODO: other possibilities than 'xml'?
        self::has('retmode',    array('is' => 'protected', 'default' => 'xml',));

        // Generated by NCBI.
        self::has('query_key',  array('is' => 'protected',));
        self::has('WebEnv',     array('is' => 'protected',));

        self::has('records_per_download', array('is' => 'protected', 'default' => 500,));

        self::has('file_set',   array('is' => 'protected',));

        self::has('date',
             array(
                 'is' => 'protected',
                 'default_function' => create_function('', 'return date("Ymd");'),
             )
        );
        self::has('eutil',
            array
            (
             'is' => 'protected',
             'default_function' => create_function(
                 '',
                 'return new NCBI_eUtil(array("format" => "raw", "util" => "fetch"));'
             ),
            )
        );

        // These are parameters to send on every search request.
        self::has('common_params',
            array
            (
             'is' => 'protected',
             'default' => array('email','db','tool','rettype','retmode','query_key','WebEnv'),
            )
        );
    }
    
    public function fetch()
    {
        $records_per_download = $this->records_per_download();
        // TODO: This still may not be right. Enumerate the cases!
        $retmax = (
            $this->count() < $records_per_download ?
            $this->count() :
            $records_per_download
        );
        $retend = $retmax - 1;
        $retstart = 0;
    
        // output
        $file_names = array();
    
        while (1) {
    
            unset( $result, $e, $file_name, $file, $params );

            $params = array
            (
             'retmax' => $retmax,
             'retstart' => $retstart,
            );
            foreach ($this->common_params() as $param) {
                $params[$param] = $this->$param();
            }

            try {
                $result = $this->eutil()->send_request($params);
            } catch (Exception $e) {
                error_log( $e->getMessage );
            }
            if (!isset($e)) {
                $file_name = $this->file_set()->add(); 
                file_put_contents($file_name, $result);
                $file_names[] = $file_name;
            }
    
            // This break was here only for testing...
            //break;
    
            if ($retend >= $this->count() - 1) break;
        
            // increment for next iteration
            $retstart += $retmax;
            $retend += $retmax;

            // TODO: This isn't right. Not sure that this condition will ever be true.
            // Shouldn't this be $retend, not $retmax?
            if ($retmax > $this->count()) $retmax = $this->count();
        }
    
        return $file_names;
    }

} // end class NCBI_EFetch
